"""Python module for capturing images from YouTube live"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/vision/01_ytlive.ipynb.

# %% auto 0
__all__ = ['nakyma_helsinki_known_places', 'nakyma_helsinkigista_youtube_live_url', 'ydl_opts', 'stream_url', 'show_frame',
           'crop_frame', 'frame_to_text', 'known', 'meta', 'fname', 'YTLive', 'NHsta', 'capture_youtube_live_frame',
           'select_youtube_live_url']

# %% ../../nbs/vision/01_ytlive.ipynb 3
from datetime import datetime
from IPython.display import Image, display
from pathlib import Path
from PIL import Image
from typing import Optional

import cv2
import glob
import matplotlib.pyplot as plt
import os
import pytesseract
import time
import yt_dlp as youtube_dl

# %% ../../nbs/vision/01_ytlive.ipynb 5
# Näkymä Helsingistä location list
nakyma_helsinki_known_places = [
    "Olympiaterminaali",
    "Etelasatama",
    #"Eteläsatama",  # fixup
    "Eteladsatama", # fixup
    "Presidentinlinna",
    "Tuomiokirkko",
    "Kauppatori",
    "Kauppator",    # fixup   
    "Torni",
    "Valkosaari",
]

# %% ../../nbs/vision/01_ytlive.ipynb 6
nakyma_helsinkigista_youtube_live_url = "https://www.youtube.com/watch?v=LMZQ7eFhm58"
ydl_opts = {
    'cookiefile': "cookies.txt",  # Path to the exported cookies file,  # Use cookies for authentication
    'download': False  # Set to True if you want to download
}

# %% ../../nbs/vision/01_ytlive.ipynb 7
def stream_url(ytlive_url:str, ydl_opts:dict) -> str:
    with youtube_dl.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(ytlive_url, download=False)
        for o in info['formats']:
            if o['resolution'] == '1280x720':
                return o['url']
        else:
            raise ValueError("No 1280x720 format")    

# %% ../../nbs/vision/01_ytlive.ipynb 11
def show_frame(frame):
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB) # Convert from BGR to RGB for Matplotlib
    plt.imshow(frame_rgb)
    plt.axis('off')  # Hide axes
    plt.show()   

# %% ../../nbs/vision/01_ytlive.ipynb 12
def crop_frame(frame, crop=(0, 0, 480, 30)):
    x, y, w, h = crop
    return frame[y:y+h, x:x+w]    

# %% ../../nbs/vision/01_ytlive.ipynb 13
def frame_to_text(frame): return pytesseract.image_to_string(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)).strip()

# %% ../../nbs/vision/01_ytlive.ipynb 14
def known(txt:str, known_places:str) -> str:
    """Try to find one of `known_places` are included in the given `txt`"""
    for o in known_places:
        #print(o, "in", txt)
        if o in txt:
            return o
    raise Exception("No place specified")

# %% ../../nbs/vision/01_ytlive.ipynb 16
def meta(frame, known_places=nakyma_helsinki_known_places, printing=False):
    """Withdraw meta data, datetime & place"""
    # "04.10.2024  14:53:49  Kauppatori", Original format
    txt = frame_to_text(frame)
    if printing==True: print(txt)
    dt = datetime.strptime(txt[:19],"%d.%m.%Y %H:%M:%S")
    pl = known(txt[20:], known_places)
    pl = pl.replace("Eteladsatama", "Etelasatama") # fixup
    pl = pl.replace("ä", "a")                      # fixup
    pl = pl.replace("kauppator", "kauppatori")     # fixup
    return dt, pl

# %% ../../nbs/vision/01_ytlive.ipynb 17
def fname(prefix, dt, pl): return f"""{prefix}{dt.strftime("%Y.%m.%d_%H:%M:%S")}_{pl}.jpg"""

# %% ../../nbs/vision/01_ytlive.ipynb 23
class YTLive:
    def __init__(
        self,
        url: str,  # YouTube Live URL
        data_dir: Optional[Path] = Path(os.getenv("LLMCAM_DATA", "../data")),  # Directory to store captured images
        place: Optional[str] = "nowhere",  # Location name
    ):
        self.url = url
        self.stream_url = stream_url(url, ydl_opts)
        self.data_dir = data_dir
        self.place = place

    def file_name(self, frame=None):
        return fname("cap_", datetime.now(), self.place)

    def capture(self) -> Path:
        cap = cv2.VideoCapture(self.stream_url)
        ret, frame = cap.read()
        if ret==False:
            raise Exception("Failed to capture frame.")
        fn = self.data_dir/self.file_name(frame)
        cv2.imwrite(fn, frame)
        return fn     

    def __call__(self):
        # __call__ method allows the instance to be called like a function
        return self.capture()

# %% ../../nbs/vision/01_ytlive.ipynb 28
class NHsta(YTLive):
    def __init__(
        self,
        url: Optional[str] = "https://www.youtube.com/watch?v=LMZQ7eFhm58", # YouTube Live URL
        data_dir: Optional[Path] = Path(os.getenv("LLMCAM_DATA", "../data")), # Directory to store captured images
        place: Optional[str] = "unclear", # Location name if OCR fails
    ):
        super().__init__(url, data_dir, place)
    
    def file_name(self, frame):
        try:        
            path = fname("cap_", *meta(crop_frame(frame), printing=True))
        except Exception as e:
            path = super().file_name()
            print(path)
        return path

# %% ../../nbs/vision/01_ytlive.ipynb 35
def capture_youtube_live_frame(
        link: Optional[str] = None,  # YouTube Live link
        place: Optional[str] = None,  # Location of live image
    ) -> str:  # Path to the saved image
    """Capture a jpeg image from YouTube Live and return the path to the saved image"""
    if link is not None:
        live = YTLive(url=link, place=place)
    
    else:
        live = NHsta()
    return str(live())

# %% ../../nbs/vision/01_ytlive.ipynb 38
# Define the function for selecting Youtube Live URL
def select_youtube_live_url(
        location: Optional[str] = "Helsinki",  # Location name, one of ["santaclausvillage", "parkinglot", "helsinki", "satellite"]
    ):
    """Select the Youtube Live URL based on the location name"""
    if "santa" in location.lower():
        return "https://www.youtube.com/watch?v=Cp4RRAEgpeU"
    if "parking" in location.lower():
        return "https://www.youtube.com/watch?v=mwN6l3O1MNI"
    if "satellite" in location.lower():
        return "https://www.youtube.com/watch?v=xRPjKQtRXR8"
    else:
        return "https://www.youtube.com/watch?v=LMZQ7eFhm58"
